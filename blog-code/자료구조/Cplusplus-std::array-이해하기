안녕하세요! 현준입니다😁
오늘은 C++ 자료구조중 가장 기초중 기초인 Std::array에 대해서 알아보겠습니다.

목차
std::array 기본 코드 설명
std::array 에러 해결
1.std::array 기본 코드 설명
우선 std::array는 10개의 서로 다른 변수를 선언하지 않고도 10개의 int타입의 값을 배열로 선언할 수 있습니다.

위에 사진을 보시면 아시겠지만 foo 라는 int 타입의 서로 다른 변수 4개를 선언했지만 , 다른 변수들은
선언하지 않았습니다.
우선 C++에서 array의 일반적인 선언방법은 유형이름 [요소]; 입니다. 위에 사진을 예로두고 코드를 짜본다면 이런 코드가 나오는데요.

#include<iostream>
using namespace std;

int main()
{

	int foo [ 5 ];


    return 0;
}
우선 int 형인 foo 라는 변수의 size를 5로 지정한 코드입니다.
가장 중요하게 보셔야 할 점은 C++의 첫번째 배열요소의 index는 항상 1이 아닌 0입니다.
그리고 배열의 크기를 정할때는 [] 를 사용합니다.
이제 예제코드 형식으로 코드 하나를 서술해보겟습니다.

#include <iostream>
#include <array>
using namespace std;

int main()
{
	array<int,10>arr1; //array 배열(array)로 int타입의 서로 다른10개의 배열이 존재하는 arr1이라는 변수를 선언
    
    arr1[0] = 10; //arr1이라는 변수의 0번째(첫번째) 인덱스 값은 10으로 선언
    
    cout << "arr1의 첫번째 원소 정보"<< arr1[0] <<endl; 
    
  return 0;
}
위 코드를 보시면 아시겠지만 , array로 코드를 구성할때는 일반적인 변수 선언과 다른방법으로 선언을 해야합니다.
위에 예제코드를 실행 시켜보면 아래와 같은 결과가 출력됩니다.


for 반복문과 array의 만남
for 반복문을 사용하여 array를 활용해보는 코드를 설명해드리겠습니다.
우선 아까와 다른점은 크게 없고 for문만 추가가 됬다는것이 가장 큰 차이점인데요.
예제코드를 먼저 보여드리겠습니다.


#include <iostream>
#include <array>
using namespace std;

int main()
{
	array<int,4>arr2{1 , 2 , 3 , 4}; 

    cout << "arr2의 모든 원소 : "<< " ";

    for(int i = 0; i < arr2.size(); i++)
        cout << arr2[i] << " ";
        cout << endl;

  return 0;
}
주석으로 쓰는건 한계가 존재해서 설명으로 대체하겟습니다.
우선 for 반복문을 하나하나 말씀드리면 int 타입인 i 라는 기본 for 반복문에 변수를 하나 선언합니다.
i 라는 기본 변수는 0이라는 값을 받고 , 조건문에서는 i 라는 기본 변수가 arr2의 size 즉 4보다 작으면 4와 같은 수가 아닌
4보다 큰 수가 될때까지 + 해야하는데요. 그러면 i는 0에서 5가 될때 반복을 중단하게 됩니다.
예제코드를 실행시켜보면 아래와 같은 결과가 출력됩니다.


2. std::array 에러 해결
제가 혼자 std::array 를 공부하다가 , 처음엔 이해가 안가던 에러를 발견했습니다.
아마 이미 C++이나 다른 언어를 열심히 공부하신분이라면 이런 표정으로 "이게 에러야? 라는 생각이 드시겠지만
우선 코드부터 보여드릴께요 !


#include <iostream>
#include <array>

int main()
{
   array<int,10>arr1;

    arr1[0] = 1;

    cout << "arr1 배열의 1번째 원소: "<<arr1[0]<<endl;
    
	array<int,4>arr2{1 , 2 , 3 , 4 , 5 , 6}; 

    cout << "arr2의 모든 원소 : "<< " ";

    for(int i = 0; i < arr2.size(); i++)
        cout << arr2[i] << " ";
        cout << endl;   

    return
}
위에 코드처럼 작성하고 실행을 하면 결과는
std_array.cpp: In function 'int main()':
std_array.cpp:14:40: error: too many initializers for 'std::array<int, 4u>'
array<int,4>arr2{1 , 2 , 3 , 4 , 5 , 6};
이런식으로 에러가 뜨는데 이 이유부터 설명드리고 그후에 해결 방법을 쉽게 설명해드리겠습니다.
우선 간단하게 말로만 놓고보면 바로 지정크기 < 내부크기 이런 이유를 들 수 있습니다.

제가 글쓴거를 꼼꼼하게 보셨다면 아시겠지만

array<int,3>arr1;
위 코드를 예로 들때 코드 리딩을 해보면 int형인 서로 다른 변수 3개 즉 사이즈는 3이라고 선언한건데요.
만약 밑에 코드처럼 arr1의 값을 자기가 지정할때 내부에 숫자 갯수가 3개 이상이면 지정된(선언된)크기보다 큰 행렬이 만들어져서
사용할수가 없습니다.

array<int,3>arr1{1 , 2 , 3 , 4 , 5 };
그러면 이제 반대로 해결 방법은 정말 쉬운데요. 위 코드의 에러를 해결하려고 한다면

array<int,5>arr1{1 , 2 , 3 , 4 , 5};
라고 작성한다면 행렬이 부족할 이유가 없기에

위에 사진처럼 정상출력을 하는것을 볼수 있습니다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

이상으로 std::array에 대해 알아보았습니다. 감사합니다.

문제
1.배열의 크기를 정할때 쓰는 괄호는?
답 : [ ]

2. array의 일반적인 선언 방법은?
답 : 유형이름 [요소];

맞춤법 , 띄어쓰기에 대한 오류는 귀엽게 봐주시면 감사하겠습니다.
필자 이메일 hyunjun050915@gmail.com

참고자료
[BOOK}: 코딩테스트를 위한 자료 구조와 알고리즘 with C++ (길벗)
[SITE]:참고사이트1
[SITE]:참고사이트2
